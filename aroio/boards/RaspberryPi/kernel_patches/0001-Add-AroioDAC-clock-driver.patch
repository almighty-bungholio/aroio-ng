From 6243e5385b0db3b8d2df805f9c0d1dcdd8d91e51 Mon Sep 17 00:00:00 2001
From: Arne Caspari <arne@unicap-imaging.org>
Date: Mon, 15 Apr 2019 10:58:03 +0200
Subject: [PATCH 1/3] Add AroioDAC clock driver

---
 drivers/clk/Makefile       |   1 +
 drivers/clk/clk-aroiodac.c | 125 +++++++++++++++++++++++++++++++++++++
 2 files changed, 126 insertions(+)
 create mode 100644 drivers/clk/clk-aroiodac.c

diff --git a/drivers/clk/Makefile b/drivers/clk/Makefile
index 9c01de6d2602..486d0e8c6c12 100644
--- a/drivers/clk/Makefile
+++ b/drivers/clk/Makefile
@@ -19,6 +19,7 @@ endif
 # hardware specific clock types
 # please keep this section sorted lexicographically by file path name
 obj-$(CONFIG_SND_BCM2708_SOC_ALLO_BOSS_DAC)	+= clk-allo-dac.o
+obj-$(CONFIG_SND_BCM2708_SOC_AROIODAC) += clk-aroiodac.o
 obj-$(CONFIG_MACH_ASM9260)		+= clk-asm9260.o
 obj-$(CONFIG_COMMON_CLK_AXI_CLKGEN)	+= clk-axi-clkgen.o
 obj-$(CONFIG_ARCH_AXXIA)		+= clk-axm5516.o
diff --git a/drivers/clk/clk-aroiodac.c b/drivers/clk/clk-aroiodac.c
new file mode 100644
index 000000000000..57d7781fcb89
--- /dev/null
+++ b/drivers/clk/clk-aroiodac.c
@@ -0,0 +1,125 @@
+#include <linux/clk-provider.h>
+#include <linux/clkdev.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+
+/* Clock rate of CLK44EN attached to GPIO6 pin */
+#define CLK_44EN_RATE 22579200UL
+/* Clock rate of CLK48EN attached to GPIO3 pin */
+#define CLK_48EN_RATE 24576000UL
+
+struct aroiodac_clk_priv {
+    struct clk_hw hw;
+    int rate;
+};
+
+#define to_aroiodac_priv(_hw) container_of(_hw, struct aroiodac_clk_priv, hw)
+
+static unsigned long clk_aroiodac_recalc_rate(struct clk_hw *hw,
+    unsigned long parent_rate)
+{
+	return (to_aroiodac_priv(hw)->rate == 0) ? CLK_44EN_RATE :
+		CLK_48EN_RATE;
+}
+
+static long clk_aroiodac_round_rate(struct clk_hw *hw,
+    unsigned long rate, unsigned long *parent_rate)
+{
+	long actual_rate;
+
+	if (rate <= CLK_44EN_RATE) {
+		actual_rate = (long)CLK_44EN_RATE;
+	} else if (rate >= CLK_48EN_RATE) {
+		actual_rate = (long)CLK_48EN_RATE;
+	} else {
+		long diff44Rate = (long)(rate - CLK_44EN_RATE);
+		long diff48Rate = (long)(CLK_48EN_RATE - rate);
+
+		if (diff44Rate < diff48Rate)
+			actual_rate = (long)CLK_44EN_RATE;
+		else
+			actual_rate = (long)CLK_48EN_RATE;
+	}
+	return actual_rate;
+}
+
+static int clk_aroiodac_set_rate(struct clk_hw *hw,
+    unsigned long rate, unsigned long parent_rate)
+{
+	unsigned long actual_rate;
+	struct aroiodac_clk_priv *priv = to_aroiodac_priv(hw);
+
+	actual_rate = (unsigned long)clk_aroiodac_round_rate(hw, rate,
+		&parent_rate);
+	priv->rate = (actual_rate == CLK_44EN_RATE) ? 0 : 1;
+	return 0;
+}
+
+static struct clk_ops clk_aroiodac_ops = {
+    .recalc_rate = clk_aroiodac_recalc_rate,
+    .round_rate = clk_aroiodac_round_rate,
+    .set_rate = clk_aroiodac_set_rate,
+};
+
+static struct clk_init_data clk_aroiodac_hw_init = {
+    .name = "clk-aroiodac",
+    .ops = &clk_aroiodac_ops,
+    .flags = CLK_IS_BASIC,
+    .parent_names = NULL,
+    .num_parents = 0,
+};
+
+static int clk_aroiodac_probe(struct platform_device *pdev)
+{
+    struct aroiodac_clk_priv *priv;
+    struct clk *clk;
+    int ret;
+
+    priv = devm_kzalloc(&pdev->dev, sizeof(struct aroiodac_clk_priv), GFP_KERNEL);
+    if(!priv)
+    {
+        dev_err(&pdev->dev, "Unable to allocate memory\n");
+        return -ENOMEM;
+    }
+
+    dev_set_drvdata(&pdev->dev, priv);
+
+    priv->hw.init = &clk_aroiodac_hw_init;
+
+    clk = devm_clk_register(&pdev->dev, &priv->hw);
+	if (!IS_ERR(clk)) {
+		ret = of_clk_add_provider(pdev->dev.of_node, of_clk_src_simple_get,
+			clk);
+	} else {
+		dev_err(&pdev->dev, "Failed to register clock\n");
+		ret = PTR_ERR(clk);
+	}
+
+	return ret;
+}
+
+static const struct of_device_id clk_aroiodac_of_match[] = {
+    { .compatible = "abacus,aroiodac-clk", },
+    {},
+};
+
+MODULE_DEVICE_TABLE(of, clk_aroiodac_of_match);
+
+static struct platform_driver clk_aroiodac_driver = {
+    .driver = {
+        .name = "clk-aroiodac",
+        .owner = THIS_MODULE,
+        .of_match_table = clk_aroiodac_of_match,
+    },
+    .probe = clk_aroiodac_probe,
+};
+
+module_platform_driver(clk_aroiodac_driver);
+
+
+MODULE_AUTHOR("Arne Caspari <arne@unicap-imaging.org");
+MODULE_DESCRIPTION("Abacus AroioDAC clock driver");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
-- 
2.21.0

